//РџРёРЅ РїРѕРґРєР»СЋС‡РµРЅ Рє ST_CP (12) РІС…РѕРґСѓ 74HC595
int latchPin = 8;
//РџРёРЅ РїРѕРґРєР»СЋС‡РµРЅ Рє SH_CP (11) РІС…РѕРґСѓ 74HC595
int clockPin = 12;
//РџРёРЅ РїРѕРґРєР»СЋС‡РµРЅ Рє DS (14) РІС…РѕРґСѓ 74HC595
int dataPin = 11;

int photo_pin = 0;

int letter_number = 55;
int pin_value = 0;
int last_pin_value = 0;
int change_value = 140;
int bitsToSend = 0;

unsigned long ledTime = 0;
unsigned long darkTime = 0;
unsigned long timeDiff = 0;

const int dot = 500;
const int approx = 100;
int dash = dot * 3;
int symbolInterval = dot;
int letterInterval = 3 * dot;
int wordInterval = 7 * dot;

int letter = 0;
int dot_symbol = 1;
int dash_symbol = 2;

static byte letters[][8] = {
  { B01110, B10001, B10001, B11111, B10001, B10001, B10001, B00000 }, //A
  { B11110, B10000, B10000, B11110, B10001, B10001, B11110, B00000 }, //Р‘
  { B11110, B10001, B10001, B11110, B10001, B10001, B11110, B00000 }, //B
  { B11111, B10001, B10000, B10000, B10000, B10000, B10000, B00000 }, //Р“
  { B01110, B01010, B01010, B01010, B01010, B11111, B10001, B00000 }, //Р”
  { B11111, B10000, B10000, B11110, B10000, B10000, B11111, B00000 }, //E
  { B10101, B10101, B10101, B01110, B10101, B10101, B10101, B00000 }, //Р–
  { B01110, B10001, B00001, B01110, B00001, B10001, B01110, B00000 }, //Р—
  { B10001, B10001, B10011, B10101, B11001, B10001, B10001, B00000 }, //Р�
  { B10101, B10101, B10011, B10101, B11001, B10001, B10001, B00000 }, //Р™
  { B10001, B10010, B10100, B11000, B10100, B10010, B10001, B00000 }, //K
  { B00111, B01001, B01001, B01001, B01001, B01001, B10001, B00000 }, //Р›
  { B10001, B11011, B10101, B10101, B10001, B10001, B10001, B00000 }, //M
  { B10001, B10001, B10001, B11111, B10001, B10001, B10001, B00000 }, //H
  { B01110, B10001, B10001, B10001, B10001, B10001, B01110, B00000 }, //O
  { B11111, B10001, B10001, B10001, B10001, B10001, B10001, B00000 }, //Рџ
  { B11110, B10001, B10001, B11110, B10000, B10000, B10000, B00000 }, //P
  { B01110, B10001, B10000, B10000, B10000, B10000, B10001, B01110 }, //C
  { B11111, B00100, B00100, B00100, B00100, B00100, B00100, B00000 }, //T
  { B10001, B10001, B10001, B01111, B00001, B10001, B01110, B00000 }, //РЈ
  { B01110, B10101, B10101, B10101, B01110, B00100, B00100, B00000 },//Р¤
  { B10001, B10001, B01010, B00100, B01010, B10001, B10001, B00000 }, //X
  { B10001, B10001, B10001, B10001, B10001, B10001, B11111, B00001 },//Р¦
  { B10001, B10001, B10001, B01111, B00001, B00001, B00001, B00000 },//Р§
  { B10101, B10101, B10101, B10101, B10101, B10101, B11111, B00000 },//РЁ
  { B10101, B10101, B10101, B10101, B10101, B10101, B11111, B00001 },//Р©
  { B10001, B10001, B10001, B11101, B10101, B10101, B11101, B00000 },//Р«
  { B10000, B10000, B10000, B11110, B10001, B10001, B11110, B00000 },//Р¬
  { B11110, B00001, B00001, B01111, B00001, B00001, B11110, B00000 },//Р­
  { B10111, B10101, B10101, B11101, B10101, B10101, B10111, B00000 },//Р®
  { B01111, B10001, B10001, B01111, B10001, B10001, B10001, B00000 },//РЇ
  //
  { B01110, B10001, B10011, B10101, B11001, B10001, B01110, B00000 },  //"0",
  { B00001, B00011, B00101, B00001, B00001, B00001, B11111, B00000 },  //"1",
  { B01110, B10001, B00001, B00010, B00100, B01000, B11111, B00000 },  //"2",
  { B11111, B00010, B00100, B00010, B00001, B10001, B01110, B00000 },  //"3",
  { B00010, B00110, B01010, B10010, B11111, B00010, B00010, B00000 },  //"4",
  { B11111, B10000, B11110, B00001, B00001, B10001, B01110, B00000 },  //"5",
  { B00110, B01000, B10000, B11110, B10001, B10001, B01110, B00000 },  //"6",
  { B11111, B00001, B00010, B00100, B01000, B01000, B01000, B00000 },  //"7",
  { B01110, B10001, B10001, B01110, B10001, B10001, B01110, B00000 },  //"8",
  { B01110, B10001, B10001, B01110, B00001, B00010, B01100, B00000 }, //"9",

  { B00000, B00000, B00000, B00000, B00000, B00110, B00110, B00000 },//".",
  { B00000, B00000, B00000, B00000, B00000, B00110, B00010, B00100 },//",",
  { B00000, B00000, B00110, B00110, B00000, B00110, B00110, B00000 },//":",
  { B00000, B00000, B00110, B00110, B00000, B00110, B00010, B00100 },//";"
  { B00010, B00010, B00010, B00010, B00010, B00000, B00010, B00000 },//"!",
  { B01110, B10001, B00001, B00010, B00100, B00000, B00100, B00000 },//"?",
  { B00000, B00000, B11111, B00000, B11111, B00000, B00000, B00000 },//"=",
  { B01010, B01010, B01010, B00000, B00000, B00000, B00000, B00000 },//"""",
  { B00000, B00100, B10101, B01110, B10101, B00100, B00000, B00000 },//"*",
  { B00000, B00001, B00010, B00100, B01000, B10000, B00000, B00000 },//"()",
  //
  { B01010, B01010, B11111, B01010, B11111, B01010, B01010, B00000 },//"/",
  { B00000, B00000, B00000, B11111, B00000, B00000, B00000, B00000 },//"-",
  { B00000, B00000, B00000, B00000, B00000, B10001, B11111, B00000 },//"_",
  { B01110, B10001, B10111, B10101, B10111, B10000, B01111, B00000 },//"@",

  { B00000, B00100, B01000, B11111, B01000, B00100, B00000, B00000 },//"ERROR" };
  { B00000, B00000, B00000, B00000, B00000, B00000, B00000, B00000 } //clear
};
//Morse code table: 1 - "dot", 2 - "dash", 0 - "error"
const int morseCodeInt[] = {
  12,       2111,     122,    221,     211,        1,     1112,     2211,     11,   1222,
  212,      1211,      22,     21,     222,     1221,      121,      111,      2,    112,
  1121,     1111,    2121,   2221,    2222,     2212,     2122,     2112,  11211,   1122,
  1212,
  22222,   12222,   11222,  11122,   11112,    11111,    21111,    22111,  22211,   22221,
  111111, 121212,  222111, 212121,   221122,   112211,   21112,   121121, 122221,  212212,
  21121,  211112,  112212, 122121, 11111111
};

int morse_port = 13;
void setup() {
  pinMode(morse_port, OUTPUT);
  Serial.begin(9600);
}

int get_count_code(int morseCode) {
  int n = 1;
  while ((morseCode /= 10) > 0)
  {
    n++;
  }
  return n;
}


void blink_morse(int digit) {
  if (digit == 0) {
    delay(letterInterval - symbolInterval);
  }
  if (digit == 1) {
    digitalWrite(morse_port, HIGH);
    delay(dot);
    digitalWrite(morse_port, LOW);
    delay(symbolInterval);
  }
  if (digit == 2) {
    digitalWrite(morse_port, HIGH);
    delay(dash);
    digitalWrite(morse_port, LOW);
    delay(symbolInterval);
  }
}

void letter_coder(int letter_number) {
  int morse_code = morseCodeInt[letter_number];
  int n = get_count_code(morse_code);
  int rank;
  int digit;
  for (int i = n - 1; i >= 0; i--) {
    rank = 1;
    for (int j = 0; j < i; j++) { 
      rank *= 10;
    }
    digit = morse_code / rank;
    blink_morse(digit);
    morse_code -= digit * rank;
  }
  blink_morse(0);
}


void loop() {
  //char* letter = "A";
  //for (int i = 0; i >= 0; i++) {
  //  Serial.println("sf");
  //}
  letter_coder(62-32);
  
  letter_coder(43-32);
  letter_coder(61-32);
  letter_coder(33-32);
  letter_coder(43-32);
  letter_coder(61-32);

  letter_coder(48-32);
  letter_coder(37-32);
  letter_coder(42-32);
  letter_coder(46-32);
  letter_coder(48-32);
  letter_coder(36`-32);

  //delay(wordInterval);
}

